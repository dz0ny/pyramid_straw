var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('angular2/core');
var router_1 = require('angular2/router');
var enums_1 = require('../../enums');
var plan_node_1 = require('../plan-node/plan-node');
var plan_service_1 = require('../../services/plan-service');
var syntax_highlight_service_1 = require('../../services/syntax-highlight-service');
var pipes_1 = require('../../pipes');
var PlanView = (function () {
    function PlanView(_planService, routeParams) {
        this._planService = _planService;
        this.hideMenu = true;
        this.viewOptions = {
            showPlanStats: true,
            showHighlightBar: true,
            showPlannerEstimate: false,
            showTags: true,
            highlightType: enums_1.HighlightType.NONE,
            viewMode: enums_1.ViewMode.FULL
        };
        this.showPlannerEstimate = true;
        this.showMenu = false;
        this.highlightTypes = enums_1.HighlightType;
        this.viewModes = enums_1.ViewMode;
        this.id = routeParams.get('id');
    }
    PlanView.prototype.getPlan = function () {
        if (!this.id) {
            return;
        }
        this.plan = this._planService.getPlan(this.id);
        this.rootContainer = this.plan.content;
        this.plan.planStats = {
            executionTime: this.rootContainer['Execution Time'] || this.rootContainer['Total Runtime'],
            planningTime: this.rootContainer['Planning Time'] || 0,
            maxRows: this.rootContainer[this._planService.MAXIMUM_ROWS_PROP] || 0,
            maxCost: this.rootContainer[this._planService.MAXIMUM_COSTS_PROP] || 0,
            maxDuration: this.rootContainer[this._planService.MAXIMUM_DURATION_PROP] || 0
        };
    };
    PlanView.prototype.ngOnInit = function () {
        this.getPlan();
    };
    PlanView.prototype.toggleHighlight = function (type) {
        this.viewOptions.highlightType = type;
    };
    PlanView.prototype.analyzePlan = function () {
        this._planService.analyzePlan(this.plan);
    };
    PlanView = __decorate([
        core_1.Component({
            selector: 'plan-view',
            template: "\n      <div class=\"menu\" [class.menu-hidden]=\"hideMenu\">\n         <header>\n            <i class=\"fa fa-cogs menu-toggle\" (click)=\"hideMenu = !hideMenu\"></i>\n            <h3>display options</h3>\n         </header>\n\n         <ul>\n            <li>\n               <input id=\"showPlanStats\" type=\"checkbox\" [(ngModel)]=\"viewOptions.showPlanStats\">\n               <label class=\"clickable\" for=\"showPlanStats\"> show plan stats</label>\n            </li>\n            <li>\n               <input id=\"showPlannerEstimate\" type=\"checkbox\" [(ngModel)]=\"viewOptions.showPlannerEstimate\">\n               <label class=\"clickable\" for=\"showPlannerEstimate\"> show planner estimate</label>\n            </li>\n            <li>\n               <input id=\"showTags\" type=\"checkbox\" [(ngModel)]=\"viewOptions.showTags\">\n               <label class=\"clickable\" for=\"showTags\"> show analysis tags</label>\n            </li>\n            <li>\n               <label>view mode: </label>\n               <div class=\"button-group\">\n                  <button [class.selected]=\"viewOptions.viewMode == viewModes.FULL\" (click)=\"viewOptions.viewMode = viewModes.FULL\">full</button>\n                  <button [class.selected]=\"viewOptions.viewMode == viewModes.COMPACT\" (click)=\"viewOptions.viewMode = viewModes.COMPACT\">compact</button>\n                  <button [class.selected]=\"viewOptions.viewMode == viewModes.DOT\" (click)=\"viewOptions.viewMode = viewModes.DOT\">dot</button>\n               </div>\n            </li>\n\n            <li>\n               <label>graph metric: </label>\n               <div class=\"button-group\">\n                  <button [class.selected]=\"viewOptions.highlightType === highlightTypes.NONE\" (click)=\"viewOptions.highlightType = highlightTypes.NONE\">none</button>\n                  <button [class.selected]=\"viewOptions.highlightType === highlightTypes.DURATION\" (click)=\"viewOptions.highlightType = highlightTypes.DURATION\">duration</button>\n                  <button [class.selected]=\"viewOptions.highlightType === highlightTypes.ROWS\" (click)=\"viewOptions.highlightType = highlightTypes.ROWS\">rows</button>\n                  <button [class.selected]=\"viewOptions.highlightType === highlightTypes.COST\" (click)=\"viewOptions.highlightType = highlightTypes.COST\">cost</button>\n               </div>\n            </li>\n         </ul>\n      </div>\n\n      <div class=\"page page-stretch\">\n         <h2><span *ngIf=\"!editName\">{{plan.name}}</span>\n            <input *ngIf=\"editName\" class=\"input-box input-box-main\" type=\"text\" [(ngModel)]=\"plan.name\">\n            <button class=\"btn btn-link btn-lg\" (click) = \"editName = !editName\">\n               <i class=\"fa fa-pencil\"></i>\n            </button>\n         </h2>\n\n         <div *ngIf=\"viewOptions.showPlanStats\" class=\"plan-stats\">\n            <div>\n               <span class=\"stat-value\">{{plan.planStats.executionTime | duration}}</span>\n               <span class=\"stat-label\">execution time ({{plan.planStats.executionTime | durationUnit}})</span>\n            </div>\n            <div *ngIf=\"plan.planStats.planningTime\">\n               <span class=\"stat-value\">{{plan.planStats.planningTime | number:'.0-2'}}</span>\n               <span class=\"stat-label\">planning time (ms)</span>\n            </div>\n            <div *ngIf=\"plan.planStats.maxDuration\">\n               <span class=\"stat-value\">{{plan.planStats.maxDuration | duration}}</span>\n               <span class=\"stat-label\">slowest node ({{plan.planStats.maxDuration | durationUnit}})</span>\n            </div>\n            <div *ngIf=\"plan.planStats.maxRows\">\n               <span class=\"stat-value\">{{plan.planStats.maxRows | number:'.0-2'}}</span>\n               <span class=\"stat-label\">largest node (rows)</span>\n            </div>\n            <div *ngIf=\"plan.planStats.maxCost\">\n               <span class=\"stat-value\">{{plan.planStats.maxCost | number:'.0-2'}}</span>\n               <span class=\"stat-label\">costliest node</span>\n            </div>\n            <div class=\"btn-close\" (click)=\"viewOptions.showPlanStats = false\"><i class=\"fa fa-close\"></i></div>\n         </div>\n\n         <div class=\"plan\">\n            <ul>\n               <li>\n                  <plan-node [plan]=\"plan\" [node]=\"rootContainer.Plan\" [viewOptions]=\"viewOptions\"></plan-node>\n               </li>\n            </ul>\n         </div>\n      </div>\n    ",
            directives: [router_1.ROUTER_DIRECTIVES, plan_node_1.PlanNode],
            providers: [plan_service_1.PlanService, syntax_highlight_service_1.SyntaxHighlightService],
            pipes: [pipes_1.DurationPipe, pipes_1.DurationUnitPipe]
        }), 
        __metadata('design:paramtypes', [plan_service_1.PlanService, router_1.RouteParams])
    ], PlanView);
    return PlanView;
})();
exports.PlanView = PlanView;

//# sourceMappingURL=data:application/json;base64,