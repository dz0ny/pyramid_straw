var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('angular2/core');
var About = (function () {
    function About() {
    }
    About = __decorate([
        core_1.Component({
            selector: 'about',
            template: "\n      <div class=\"page page-content\">\n         <h2>Postgres EXPLAIN Visualizer (Pev)</h2>\n         <p>\n            Pev is designed to make <a href=\"http://www.postgresql.org/docs/current/static/sql-explain.html\">\n            Postgres query plans</a> easier to grok. It displays a plan as a tree, with each node representing a step that takes in a row set\n            and produces another. Pev can show you a number of useful things:</p>\n            <ul>\n               <li>overall plan stats</li>\n               <li>individual node stats (duration, row size, cost)</li>\n               <li>explanation of what each node does</li>\n               <li>outlier nodes</li>\n               <li>graph of a specific metric (like cost) for all nodes</li>\n               <li>for some nodes, highlighted part of the query which corresponds to the node</li>\n            </ul>\n\n         <p>You can tweak display options using the menu on the right.</p>\n\n         <h3>Usage tips</h3>\n         <p>Pev currently accepts only JSON formatted plans. In fact, the get the most out of it,\n            I recommend generating a query plan using the following line:\n            <code>EXPLAIN (ANALYZE, COSTS, VERBOSE, BUFFERS, FORMAT JSON)</code>. I also recommend submitting a (decently formatted)\n            SQL query that generated the plan. Doing so will make Pev more useful.\n         </p>\n\n         <p>Pev will remember the plans you analyzed. They are stored locally and are not submitted to me. This is good\n         because no one but you will see your queries. It's also bad because you can't share them with others.</p>\n\n         <h3>Acknowledgements</h3>\n         <p>Pev was inspired and heavily influenced by the excellent <a href=\"http://explain.depesz.com/\">explain.depesz.com</a>. Both the\n            tool and the corresponding help files are a great resource to learn about Postgres and its planner.\n         </p>\n\n         <h3>Help me improve Pev</h3>\n         <p>If you want to help, there are multiple ways to contribute:</p>\n         <ul>\n            <li>give me your plans - I need more test cases for the layout</li>\n            <li>add descriptions for missing node types (especially ones from newer versions of Postgres)</li>\n            <li>contribute to the code on <a href=\"https://github.com/AlexTatiyants/pev\">github</a></li>\n         </ul>\n\n      </div>\n    "
        }), 
        __metadata('design:paramtypes', [])
    ], About);
    return About;
})();
exports.About = About;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvYWJvdXQvYWJvdXQudHMiXSwibmFtZXMiOlsiQWJvdXQiLCJBYm91dC5jb25zdHJ1Y3RvciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEscUJBQXdCLGVBQWUsQ0FBQyxDQUFBO0FBRXhDO0lBQUFBO0lBOENvQkMsQ0FBQ0E7SUE5Q3JCRDtRQUFDQSxnQkFBU0EsQ0FBQ0E7WUFDUEEsUUFBUUEsRUFBRUEsT0FBT0E7WUFDakJBLFFBQVFBLEVBQUVBLGszRUEwQ1RBO1NBQ0pBLENBQUNBOztjQUNtQkE7SUFBREEsWUFBQ0E7QUFBREEsQ0E5Q3BCLEFBOENxQkEsSUFBQTtBQUFSLGFBQUssUUFBRyxDQUFBIiwiZmlsZSI6ImNvbXBvbmVudHMvYWJvdXQvYWJvdXQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudH0gZnJvbSAnYW5ndWxhcjIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYWJvdXQnLFxuICAgIHRlbXBsYXRlOiBgXG4gICAgICA8ZGl2IGNsYXNzPVwicGFnZSBwYWdlLWNvbnRlbnRcIj5cbiAgICAgICAgIDxoMj5Qb3N0Z3JlcyBFWFBMQUlOIFZpc3VhbGl6ZXIgKFBldik8L2gyPlxuICAgICAgICAgPHA+XG4gICAgICAgICAgICBQZXYgaXMgZGVzaWduZWQgdG8gbWFrZSA8YSBocmVmPVwiaHR0cDovL3d3dy5wb3N0Z3Jlc3FsLm9yZy9kb2NzL2N1cnJlbnQvc3RhdGljL3NxbC1leHBsYWluLmh0bWxcIj5cbiAgICAgICAgICAgIFBvc3RncmVzIHF1ZXJ5IHBsYW5zPC9hPiBlYXNpZXIgdG8gZ3Jvay4gSXQgZGlzcGxheXMgYSBwbGFuIGFzIGEgdHJlZSwgd2l0aCBlYWNoIG5vZGUgcmVwcmVzZW50aW5nIGEgc3RlcCB0aGF0IHRha2VzIGluIGEgcm93IHNldFxuICAgICAgICAgICAgYW5kIHByb2R1Y2VzIGFub3RoZXIuIFBldiBjYW4gc2hvdyB5b3UgYSBudW1iZXIgb2YgdXNlZnVsIHRoaW5nczo8L3A+XG4gICAgICAgICAgICA8dWw+XG4gICAgICAgICAgICAgICA8bGk+b3ZlcmFsbCBwbGFuIHN0YXRzPC9saT5cbiAgICAgICAgICAgICAgIDxsaT5pbmRpdmlkdWFsIG5vZGUgc3RhdHMgKGR1cmF0aW9uLCByb3cgc2l6ZSwgY29zdCk8L2xpPlxuICAgICAgICAgICAgICAgPGxpPmV4cGxhbmF0aW9uIG9mIHdoYXQgZWFjaCBub2RlIGRvZXM8L2xpPlxuICAgICAgICAgICAgICAgPGxpPm91dGxpZXIgbm9kZXM8L2xpPlxuICAgICAgICAgICAgICAgPGxpPmdyYXBoIG9mIGEgc3BlY2lmaWMgbWV0cmljIChsaWtlIGNvc3QpIGZvciBhbGwgbm9kZXM8L2xpPlxuICAgICAgICAgICAgICAgPGxpPmZvciBzb21lIG5vZGVzLCBoaWdobGlnaHRlZCBwYXJ0IG9mIHRoZSBxdWVyeSB3aGljaCBjb3JyZXNwb25kcyB0byB0aGUgbm9kZTwvbGk+XG4gICAgICAgICAgICA8L3VsPlxuXG4gICAgICAgICA8cD5Zb3UgY2FuIHR3ZWFrIGRpc3BsYXkgb3B0aW9ucyB1c2luZyB0aGUgbWVudSBvbiB0aGUgcmlnaHQuPC9wPlxuXG4gICAgICAgICA8aDM+VXNhZ2UgdGlwczwvaDM+XG4gICAgICAgICA8cD5QZXYgY3VycmVudGx5IGFjY2VwdHMgb25seSBKU09OIGZvcm1hdHRlZCBwbGFucy4gSW4gZmFjdCwgdGhlIGdldCB0aGUgbW9zdCBvdXQgb2YgaXQsXG4gICAgICAgICAgICBJIHJlY29tbWVuZCBnZW5lcmF0aW5nIGEgcXVlcnkgcGxhbiB1c2luZyB0aGUgZm9sbG93aW5nIGxpbmU6XG4gICAgICAgICAgICA8Y29kZT5FWFBMQUlOIChBTkFMWVpFLCBDT1NUUywgVkVSQk9TRSwgQlVGRkVSUywgRk9STUFUIEpTT04pPC9jb2RlPi4gSSBhbHNvIHJlY29tbWVuZCBzdWJtaXR0aW5nIGEgKGRlY2VudGx5IGZvcm1hdHRlZClcbiAgICAgICAgICAgIFNRTCBxdWVyeSB0aGF0IGdlbmVyYXRlZCB0aGUgcGxhbi4gRG9pbmcgc28gd2lsbCBtYWtlIFBldiBtb3JlIHVzZWZ1bC5cbiAgICAgICAgIDwvcD5cblxuICAgICAgICAgPHA+UGV2IHdpbGwgcmVtZW1iZXIgdGhlIHBsYW5zIHlvdSBhbmFseXplZC4gVGhleSBhcmUgc3RvcmVkIGxvY2FsbHkgYW5kIGFyZSBub3Qgc3VibWl0dGVkIHRvIG1lLiBUaGlzIGlzIGdvb2RcbiAgICAgICAgIGJlY2F1c2Ugbm8gb25lIGJ1dCB5b3Ugd2lsbCBzZWUgeW91ciBxdWVyaWVzLiBJdCdzIGFsc28gYmFkIGJlY2F1c2UgeW91IGNhbid0IHNoYXJlIHRoZW0gd2l0aCBvdGhlcnMuPC9wPlxuXG4gICAgICAgICA8aDM+QWNrbm93bGVkZ2VtZW50czwvaDM+XG4gICAgICAgICA8cD5QZXYgd2FzIGluc3BpcmVkIGFuZCBoZWF2aWx5IGluZmx1ZW5jZWQgYnkgdGhlIGV4Y2VsbGVudCA8YSBocmVmPVwiaHR0cDovL2V4cGxhaW4uZGVwZXN6LmNvbS9cIj5leHBsYWluLmRlcGVzei5jb208L2E+LiBCb3RoIHRoZVxuICAgICAgICAgICAgdG9vbCBhbmQgdGhlIGNvcnJlc3BvbmRpbmcgaGVscCBmaWxlcyBhcmUgYSBncmVhdCByZXNvdXJjZSB0byBsZWFybiBhYm91dCBQb3N0Z3JlcyBhbmQgaXRzIHBsYW5uZXIuXG4gICAgICAgICA8L3A+XG5cbiAgICAgICAgIDxoMz5IZWxwIG1lIGltcHJvdmUgUGV2PC9oMz5cbiAgICAgICAgIDxwPklmIHlvdSB3YW50IHRvIGhlbHAsIHRoZXJlIGFyZSBtdWx0aXBsZSB3YXlzIHRvIGNvbnRyaWJ1dGU6PC9wPlxuICAgICAgICAgPHVsPlxuICAgICAgICAgICAgPGxpPmdpdmUgbWUgeW91ciBwbGFucyAtIEkgbmVlZCBtb3JlIHRlc3QgY2FzZXMgZm9yIHRoZSBsYXlvdXQ8L2xpPlxuICAgICAgICAgICAgPGxpPmFkZCBkZXNjcmlwdGlvbnMgZm9yIG1pc3Npbmcgbm9kZSB0eXBlcyAoZXNwZWNpYWxseSBvbmVzIGZyb20gbmV3ZXIgdmVyc2lvbnMgb2YgUG9zdGdyZXMpPC9saT5cbiAgICAgICAgICAgIDxsaT5jb250cmlidXRlIHRvIHRoZSBjb2RlIG9uIDxhIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vQWxleFRhdGl5YW50cy9wZXZcIj5naXRodWI8L2E+PC9saT5cbiAgICAgICAgIDwvdWw+XG5cbiAgICAgIDwvZGl2PlxuICAgIGBcbn0pXG5leHBvcnQgY2xhc3MgQWJvdXQge31cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==