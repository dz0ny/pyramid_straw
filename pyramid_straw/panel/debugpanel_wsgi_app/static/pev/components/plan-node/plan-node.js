var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('angular2/core');
var enums_1 = require('../../enums');
var pipes_1 = require('../../pipes');
var plan_service_1 = require('../../services/plan-service');
var syntax_highlight_service_1 = require('../../services/syntax-highlight-service');
var help_service_1 = require('../../services/help-service');
var color_service_1 = require('../../services/color-service');
var PlanNode = (function () {
    function PlanNode(_planService, _syntaxHighlightService, _helpService, _colorService) {
        this._planService = _planService;
        this._syntaxHighlightService = _syntaxHighlightService;
        this._helpService = _helpService;
        this._colorService = _colorService;
        this.NORMAL_WIDTH = 220;
        this.COMPACT_WIDTH = 140;
        this.DOT_WIDTH = 30;
        this.EXPANDED_WIDTH = 400;
        this.MIN_ESTIMATE_MISS = 100;
        this.COSTLY_TAG = 'costliest';
        this.SLOW_TAG = 'slowest';
        this.LARGE_TAG = 'largest';
        this.ESTIMATE_TAG = 'bad estimate';
        this.estimateDirections = enums_1.EstimateDirection;
        this.highlightTypes = enums_1.HighlightType;
        this.viewModes = enums_1.ViewMode;
    }
    PlanNode.prototype.ngOnInit = function () {
        this.currentHighlightType = this.viewOptions.highlightType;
        this.calculateBar();
        this.calculateProps();
        this.calculateDuration();
        this.calculateTags();
        this.plannerRowEstimateDirection = this.node[this._planService.PLANNER_ESIMATE_DIRECTION];
        this.plannerRowEstimateValue = _.round(this.node[this._planService.PLANNER_ESTIMATE_FACTOR]);
    };
    PlanNode.prototype.ngDoCheck = function () {
        if (this.currentHighlightType !== this.viewOptions.highlightType) {
            this.currentHighlightType = this.viewOptions.highlightType;
            this.calculateBar();
        }
        if (this.currentCompactView !== this.viewOptions.showCompactView) {
            this.currentCompactView = this.viewOptions.showCompactView;
            this.calculateBar();
        }
        if (this.currentExpandedView !== this.showDetails) {
            this.currentExpandedView = this.showDetails;
            this.calculateBar();
        }
    };
    PlanNode.prototype.getFormattedQuery = function () {
        var keyItems = [];
        var relationName = this.node[this._planService.RELATION_NAME_PROP];
        if (relationName) {
            keyItems.push(this.node[this._planService.SCHEMA_PROP] + '.' + relationName);
            keyItems.push(' ' + relationName);
            keyItems.push(' ' + this.node[this._planService.ALIAS_PROP] + ' ');
        }
        var groupKey = this.node[this._planService.GROUP_KEY_PROP];
        if (groupKey) {
            keyItems.push('GROUP BY ' + groupKey.join(','));
        }
        var hashCondition = this.node[this._planService.HASH_CONDITION_PROP];
        if (hashCondition) {
            keyItems.push(hashCondition.replace('(', '').replace(')', ''));
        }
        if (this.node[this._planService.NODE_TYPE_PROP].toUpperCase() === 'LIMIT') {
            keyItems.push('LIMIT');
        }
        return this._syntaxHighlightService.highlight(this.plan.query, keyItems);
    };
    PlanNode.prototype.calculateBar = function () {
        switch (this.viewOptions.viewMode) {
            case enums_1.ViewMode.DOT:
                this.barContainerWidth = this.DOT_WIDTH;
                break;
            case enums_1.ViewMode.COMPACT:
                this.barContainerWidth = this.COMPACT_WIDTH;
                break;
            default:
                this.barContainerWidth = this.NORMAL_WIDTH;
                break;
        }
        if (this.currentExpandedView) {
            this.barContainerWidth = this.EXPANDED_WIDTH;
        }
        switch (this.currentHighlightType) {
            case enums_1.HighlightType.DURATION:
                this.highlightValue = (this.node[this._planService.ACTUAL_DURATION_PROP]);
                this.barWidth = Math.round((this.highlightValue / this.plan.planStats.maxDuration) * this.barContainerWidth);
                break;
            case enums_1.HighlightType.ROWS:
                this.highlightValue = (this.node[this._planService.ACTUAL_ROWS_PROP]);
                this.barWidth = Math.round((this.highlightValue / this.plan.planStats.maxRows) * this.barContainerWidth);
                break;
            case enums_1.HighlightType.COST:
                this.highlightValue = (this.node[this._planService.ACTUAL_COST_PROP]);
                this.barWidth = Math.round((this.highlightValue / this.plan.planStats.maxCost) * this.barContainerWidth);
                break;
        }
        if (this.barWidth < 1) {
            this.barWidth = 1;
        }
        this.backgroundColor = this._colorService.numberToColorHsl(1 - this.barWidth / this.barContainerWidth);
    };
    PlanNode.prototype.calculateDuration = function () {
        this.executionTimePercent = (_.round((this.node[this._planService.ACTUAL_DURATION_PROP] / this.plan.planStats.executionTime) * 100));
    };
    PlanNode.prototype.calculateProps = function () {
        this.props = _.chain(this.node)
            .omit(this._planService.PLANS_PROP)
            .map(function (value, key) {
            return { key: key, value: value };
        })
            .value();
    };
    PlanNode.prototype.calculateTags = function () {
        this.tags = [];
        if (this.node[this._planService.SLOWEST_NODE_PROP]) {
            this.tags.push(this.SLOW_TAG);
        }
        if (this.node[this._planService.COSTLIEST_NODE_PROP]) {
            this.tags.push(this.COSTLY_TAG);
        }
        if (this.node[this._planService.LARGEST_NODE_PROP]) {
            this.tags.push(this.LARGE_TAG);
        }
        if (this.node[this._planService.PLANNER_ESTIMATE_FACTOR] >= this.MIN_ESTIMATE_MISS) {
            this.tags.push(this.ESTIMATE_TAG);
        }
    };
    PlanNode.prototype.getNodeTypeDescription = function () {
        return this._helpService.getNodeTypeDescription(this.node[this._planService.NODE_TYPE_PROP]);
    };
    PlanNode.prototype.getNodeName = function () {
        if (this.viewOptions.viewMode === enums_1.ViewMode.DOT && !this.showDetails) {
            return this.node[this._planService.NODE_TYPE_PROP].replace(/[^A-Z]/g, '').toUpperCase();
        }
        return (this.node[this._planService.NODE_TYPE_PROP]).toUpperCase();
    };
    PlanNode.prototype.getTagName = function (tagName) {
        if (this.viewOptions.viewMode === enums_1.ViewMode.DOT && !this.showDetails) {
            return tagName.charAt(0);
        }
        return tagName;
    };
    PlanNode.prototype.shouldShowPlannerEstimate = function () {
        if (this.viewOptions.showPlannerEstimate && this.showDetails) {
            return true;
        }
        if (this.viewOptions.viewMode === enums_1.ViewMode.DOT) {
            return false;
        }
        return this.viewOptions.showPlannerEstimate;
    };
    PlanNode.prototype.shouldShowNodeBarLabel = function () {
        if (this.showDetails) {
            return true;
        }
        if (this.viewOptions.viewMode === enums_1.ViewMode.DOT) {
            return false;
        }
        return true;
    };
    PlanNode = __decorate([
        core_1.Component({
            selector: 'plan-node',
            inputs: ['plan', 'node', 'viewOptions'],
            template: "\n      <div class=\"plan-node\"\n         [class.expanded]=\"showDetails\"\n         [class.compact]=\"viewOptions.viewMode === viewModes.COMPACT\"\n         [class.dot]=\"viewOptions.viewMode === viewModes.DOT\">\n\n         <header (click)=\"showDetails = !showDetails\" tooltip=\"view node details\">\n            <h4>{{getNodeName()}}</h4>\n            <span *ngIf=\"viewOptions.viewMode === viewModes.FULL || showDetails\">\n               <span class=\"node-duration\">{{node[_planService.ACTUAL_DURATION_PROP] | duration}}<span class=\"text-muted\">{{node[_planService.ACTUAL_DURATION_PROP] | durationUnit}}\n                   | </span><strong>{{executionTimePercent}}</strong>\n                  <span class=\"text-muted\">%</span>\n               </span>\n            </span>\n         </header>\n\n         <button *ngIf=\"plan.query && viewOptions.viewMode === viewModes.FULL\" tooltip=\"view corresponding query\"\n            class=\"btn btn-sm btn-default btn-slim pull-right\" (click)=\"showQuery = !showQuery\">\n            <i class=\"fa fa-database\"></i>\n         </button>\n\n         <div *ngIf=\"viewOptions.viewMode === viewModes.FULL\">\n            <div class=\"relation-name\" *ngIf=\"node[_planService.RELATION_NAME_PROP]\">\n               <span class=\"text-muted\">on </span>\n               <span *ngIf=\"node[_planService.SCHEMA_PROP]\">{{node[_planService.SCHEMA_PROP]}}.</span>{{node[_planService.RELATION_NAME_PROP]}}\n               <span *ngIf=\"node[_planService.ALIAS_PROP]\"> ({{node[_planService.ALIAS_PROP]}})</span>\n            </div>\n\n            <div class=\"relation-name\" *ngIf=\"node[_planService.GROUP_KEY_PROP]\">\n               <span class=\"text-muted\">by</span> {{node[_planService.GROUP_KEY_PROP]}}</div>\n            <div class=\"relation-name\" *ngIf=\"node[_planService.SORT_KEY_PROP]\">\n               <span class=\"text-muted\">by</span> {{node[_planService.SORT_KEY_PROP]}}</div>\n            <div class=\"relation-name\" *ngIf=\"node[_planService.JOIN_TYPE_PROP]\">{{node[_planService.JOIN_TYPE_PROP]}}\n               <span class=\"text-muted\">join</span></div>\n            <div class=\"relation-name\" *ngIf=\"node[_planService.INDEX_NAME_PROP]\"><span class=\"text-muted\">\n               using</span> {{node[_planService.INDEX_NAME_PROP]}}</div>\n            <div class=\"relation-name\" *ngIf=\"node[_planService.HASH_CONDITION_PROP]\"><span class=\"text-muted\">\n               on</span> {{node[_planService.HASH_CONDITION_PROP]}}</div>\n            <div class=\"relation-name\" *ngIf=\"node[_planService.CTE_NAME_PROP]\">\n                  <span class=\"text-muted\">CTE</span> {{node[_planService.CTE_NAME_PROP]}}\n            </div>\n         </div>\n\n         <div class=\"tags\" *ngIf=\"viewOptions.showTags && tags.length > 0\">\n            <span *ngFor=\"#tag of tags\">{{getTagName(tag)}}</span>\n         </div>\n\n         <div *ngIf=\"currentHighlightType !== highlightTypes.NONE\">\n            <div class=\"node-bar-container\">\n               <span class=\"node-bar\" [style.width]=\"barWidth+'px'\" [style.backgroundColor]=\"backgroundColor\"></span>\n            </div>\n            <span class=\"node-bar-label\" *ngIf=\"shouldShowNodeBarLabel()\">\n               <span class=\"text-muted\">{{viewOptions.highlightType}}:</span> {{highlightValue | number:'.0-2'}}\n            </span>\n         </div>\n\n         <div class=\"planner-estimate\" *ngIf=\"shouldShowPlannerEstimate()\">\n            <span *ngIf=\"plannerRowEstimateDirection === estimateDirections.over\"><strong>over</strong> estimated rows</span>\n            <span *ngIf=\"plannerRowEstimateDirection === estimateDirections.under\"><strong>under</strong> estimated rows</span>\n            <span> by <strong>{{plannerRowEstimateValue | number}}</strong>x</span>\n         </div>\n\n         <div *ngIf=\"showDetails\">\n            <div *ngIf=\"getNodeTypeDescription()\" class=\"node-description\">\n               <span class=\"node-type\">{{node[_planService.NODE_TYPE_PROP]}} Node</span> <span [innerHtml]=\"getNodeTypeDescription()\"></span>\n            </div>\n\n            <table class=\"table prop-list\">\n               <tr *ngFor=\"#prop of props\">\n                  <td width=\"40%\">{{prop.key}}</td>\n                  <td>{{prop.value}}</td>\n               <tr>\n            </table>\n            <div class=\"text-muted pad-top align-right\"><em>*Pev calculated value</em></div>\n         </div>\n\n         <div *ngIf=\"showQuery\" class=\"plan-query-container\">\n            <button class=\"btn btn-close pull-right\" (click)=\"showQuery = false\">\n               <i class=\"fa fa-close\"></i>\n            </button>\n            <h3>query</h3>\n            <pre class=\"plan-query-text\"><code [innerHTML]=\"getFormattedQuery()\"></code></pre>\n         </div>\n      </div>\n\n      <ul *ngIf=\"node.Plans\">\n        <li *ngFor=\"#subNode of node.Plans\">\n          <plan-node [plan]=\"plan\" [node]=\"subNode\" [viewOptions]=\"viewOptions\" [planStats]=\"planStats\"></plan-node>\n        </li>\n      </ul>\n    ",
            directives: [PlanNode],
            providers: [plan_service_1.PlanService, syntax_highlight_service_1.SyntaxHighlightService, help_service_1.HelpService, color_service_1.ColorService],
            pipes: [pipes_1.DurationPipe, pipes_1.DurationUnitPipe]
        }), 
        __metadata('design:paramtypes', [plan_service_1.PlanService, syntax_highlight_service_1.SyntaxHighlightService, help_service_1.HelpService, color_service_1.ColorService])
    ], PlanNode);
    return PlanNode;
})();
exports.PlanNode = PlanNode;

//# sourceMappingURL=data:application/json;base64,