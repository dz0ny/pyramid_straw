var enums_1 = require('../enums');
var PlanService = (function () {
    function PlanService() {
        this.NODE_TYPE_PROP = 'Node Type';
        this.ACTUAL_ROWS_PROP = 'Actual Rows';
        this.PLAN_ROWS_PROP = 'Plan Rows';
        this.ACTUAL_TOTAL_TIME_PROP = 'Actual Total Time';
        this.ACTUAL_LOOPS_PROP = 'Actual Loops';
        this.TOTAL_COST_PROP = 'Total Cost';
        this.PLANS_PROP = 'Plans';
        this.RELATION_NAME_PROP = 'Relation Name';
        this.SCHEMA_PROP = 'Schema';
        this.ALIAS_PROP = 'Alias';
        this.GROUP_KEY_PROP = 'Group Key';
        this.SORT_KEY_PROP = 'Sort Key';
        this.JOIN_TYPE_PROP = 'Join Type';
        this.INDEX_NAME_PROP = 'Index Name';
        this.HASH_CONDITION_PROP = 'Hash Cond';
        this.COMPUTED_TAGS_PROP = '*Tags';
        this.COSTLIEST_NODE_PROP = '*Costiest Node (by cost)';
        this.LARGEST_NODE_PROP = '*Largest Node (by rows)';
        this.SLOWEST_NODE_PROP = '*Slowest Node (by duration)';
        this.MAXIMUM_COSTS_PROP = '*Most Expensive Node (cost)';
        this.MAXIMUM_ROWS_PROP = '*Largest Node (rows)';
        this.MAXIMUM_DURATION_PROP = '*Slowest Node (time)';
        this.ACTUAL_DURATION_PROP = '*Actual Duration';
        this.ACTUAL_COST_PROP = '*Actual Cost';
        this.PLANNER_ESTIMATE_FACTOR = '*Planner Row Estimate Factor';
        this.PLANNER_ESIMATE_DIRECTION = '*Planner Row Estimate Direction';
        this.CTE_SCAN_PROP = 'CTE Scan';
        this.CTE_NAME_PROP = 'CTE Name';
        this.ARRAY_INDEX_KEY = 'arrayIndex';
        this.PEV_PLAN_TAG = 'plan_';
        this._maxRows = 0;
        this._maxCost = 0;
        this._maxDuration = 0;
    }
    PlanService.prototype.getPlans = function () {
        var plans = [];
        for (var i in localStorage) {
            if (_.startsWith(i, this.PEV_PLAN_TAG)) {
                plans.push(JSON.parse(localStorage[i]));
            }
        }
        return _.chain(plans)
            .sortBy('createdOn')
            .reverse()
            .value();
    };
    PlanService.prototype.getPlan = function (id) {
        return JSON.parse(localStorage.getItem(id));
    };
    PlanService.prototype.createPlan = function (planName, planContent, planQuery) {
        var plan = {
            id: this.PEV_PLAN_TAG + new Date().getTime().toString(),
            name: planName || 'plan created on ' + moment().format('LLL'),
            createdOn: new Date(),
            content: JSON.parse(planContent)[0],
            query: planQuery
        };
        this.analyzePlan(plan);
        return plan;
    };
    PlanService.prototype.isJsonString = function (str) {
        try {
            JSON.parse(str);
        }
        catch (e) {
            return false;
        }
        return true;
    };
    PlanService.prototype.analyzePlan = function (plan) {
        this.processNode(plan.content.Plan);
        plan.content[this.MAXIMUM_ROWS_PROP] = this._maxRows;
        plan.content[this.MAXIMUM_COSTS_PROP] = this._maxCost;
        plan.content[this.MAXIMUM_DURATION_PROP] = this._maxDuration;
        this.findOutlierNodes(plan.content.Plan);
        localStorage.setItem(plan.id, JSON.stringify(plan));
    };
    PlanService.prototype.deletePlan = function (plan) {
        localStorage.removeItem(plan.id);
    };
    PlanService.prototype.deleteAllPlans = function () {
        localStorage.clear();
    };
    PlanService.prototype.processNode = function (node) {
        var _this = this;
        this.calculatePlannerEstimate(node);
        this.calculateActuals(node);
        _.each(node, function (value, key) {
            _this.calculateMaximums(node, key, value);
            if (key === _this.PLANS_PROP) {
                _.each(value, function (value) {
                    _this.processNode(value);
                });
            }
        });
    };
    PlanService.prototype.calculateMaximums = function (node, key, value) {
        if (key === this.ACTUAL_ROWS_PROP && this._maxRows < value) {
            this._maxRows = value;
        }
        if (key === this.ACTUAL_COST_PROP && this._maxCost < value) {
            this._maxCost = value;
        }
        if (key === this.ACTUAL_DURATION_PROP && this._maxDuration < value) {
            this._maxDuration = value;
        }
    };
    PlanService.prototype.findOutlierNodes = function (node) {
        var _this = this;
        node[this.SLOWEST_NODE_PROP] = false;
        node[this.LARGEST_NODE_PROP] = false;
        node[this.COSTLIEST_NODE_PROP] = false;
        if (node[this.ACTUAL_COST_PROP] === this._maxCost) {
            node[this.COSTLIEST_NODE_PROP] = true;
        }
        if (node[this.ACTUAL_ROWS_PROP] === this._maxRows) {
            node[this.LARGEST_NODE_PROP] = true;
        }
        if (node[this.ACTUAL_DURATION_PROP] === this._maxDuration) {
            node[this.SLOWEST_NODE_PROP] = true;
        }
        _.each(node, function (value, key) {
            if (key === _this.PLANS_PROP) {
                _.each(value, function (value) {
                    _this.findOutlierNodes(value);
                });
            }
        });
    };
    PlanService.prototype.calculateActuals = function (node) {
        var _this = this;
        node[this.ACTUAL_DURATION_PROP] = node[this.ACTUAL_TOTAL_TIME_PROP];
        node[this.ACTUAL_COST_PROP] = node[this.TOTAL_COST_PROP];
        console.log(node);
        _.each(node.Plans, function (subPlan) {
            console.log('processing chldren', subPlan);
            if (subPlan[_this.NODE_TYPE_PROP] !== _this.CTE_SCAN_PROP) {
                node[_this.ACTUAL_DURATION_PROP] = node[_this.ACTUAL_DURATION_PROP] - subPlan[_this.ACTUAL_TOTAL_TIME_PROP];
                node[_this.ACTUAL_COST_PROP] = node[_this.ACTUAL_COST_PROP] - subPlan[_this.TOTAL_COST_PROP];
            }
        });
        if (node[this.ACTUAL_COST_PROP] < 0) {
            node[this.ACTUAL_COST_PROP] = 0;
        }
        node[this.ACTUAL_DURATION_PROP] = node[this.ACTUAL_DURATION_PROP] * node[this.ACTUAL_LOOPS_PROP];
    };
    PlanService.prototype.calculatePlannerEstimate = function (node) {
        node[this.PLANNER_ESTIMATE_FACTOR] = node[this.ACTUAL_ROWS_PROP] / node[this.PLAN_ROWS_PROP];
        node[this.PLANNER_ESIMATE_DIRECTION] = enums_1.EstimateDirection.under;
        if (node[this.PLANNER_ESTIMATE_FACTOR] < 1) {
            node[this.PLANNER_ESIMATE_DIRECTION] = enums_1.EstimateDirection.over;
            node[this.PLANNER_ESTIMATE_FACTOR] = node[this.PLAN_ROWS_PROP] / node[this.ACTUAL_ROWS_PROP];
        }
    };
    return PlanService;
})();
exports.PlanService = PlanService;

//# sourceMappingURL=data:application/json;base64,