var HelpService = (function () {
    function HelpService() {
    }
    HelpService.prototype.getNodeTypeDescription = function (nodeType) {
        return exports.NODE_DESCRIPTIONS[nodeType.toUpperCase()];
    };
    return HelpService;
})();
exports.HelpService = HelpService;
exports.NODE_DESCRIPTIONS = {
    'LIMIT': 'returns a specified number of rows from a record set.',
    'SORT': 'sorts a record set based on the specified sort key.',
    'NESTED LOOP': "merges two record sets by looping through every record in the first set and\n   trying to find a match in the second set. All matching records are returned.",
    'MERGE JOIN': "merges two record sets by first sorting them on a <strong>join key</strong>.",
    'HASH': "generates a hash table from the records in the input recordset. Hash is used by\n   <strong>Hash Join</strong>.",
    'HASH JOIN': "joins to record sets by hashing one of them (using a <strong>Hash Scan</scan>).",
    'AGGREGATE': "groups records together based on a GROUP BY or aggregate function (like <code>sum()</code>).",
    'HASHAGGREGATE': "groups records together based on a GROUP BY or aggregate function (like sum()). Hash Aggregate uses\n   a hash to first organize the records by a key.",
    'SEQ SCAN': "finds relevant records by sequentially scanning the input record set. When reading from a table,\n   Seq Scans (unlike Index Scans) perform a single read operation (only the table is read).",
    'INDEX SCAN': "finds relevant records based on an <strong>Index</strong>. Index Scans perform 2 read operations: one to\n   read the index and another to read the actual value from the table.",
    'INDEX ONLY SCAN': "finds relevant records based on an <strong>Index</strong>. Index Only Scans perform a single read operation\n   from the index and do not read from the corresponding table.",
    'BITMAP HEAP SCAN': 'searches through the pages returned by the <strong>Bitmap Index Scan</strong> for relevant rows.',
    'BITMAP INDEX SCAN': "uses a <strong>Bitmap Index</strong> (index which uses 1 bit per page) to find all relevant pages.\n   Results of this node are fed to the <strong>Bitmap Heap Scan</strong>.",
    'CTE SCAN': "performs a sequential scan of <strong>Common Table Expression (CTE) query</strong> results. Note that\n   results of a CTE are materialized (calculated and temporarily stored)."
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2VzL2hlbHAtc2VydmljZS50cyJdLCJuYW1lcyI6WyJIZWxwU2VydmljZSIsIkhlbHBTZXJ2aWNlLmNvbnN0cnVjdG9yIiwiSGVscFNlcnZpY2UuZ2V0Tm9kZVR5cGVEZXNjcmlwdGlvbiJdLCJtYXBwaW5ncyI6IkFBRUE7SUFBQUE7SUFJQUMsQ0FBQ0E7SUFIRUQsNENBQXNCQSxHQUF0QkEsVUFBdUJBLFFBQWdCQTtRQUNwQ0UsTUFBTUEsQ0FBQ0EseUJBQWlCQSxDQUFDQSxRQUFRQSxDQUFDQSxXQUFXQSxFQUFFQSxDQUFDQSxDQUFDQTtJQUNwREEsQ0FBQ0E7SUFDSkYsa0JBQUNBO0FBQURBLENBSkEsQUFJQ0EsSUFBQTtBQUpZLG1CQUFXLGNBSXZCLENBQUE7QUFFVSx5QkFBaUIsR0FBRztJQUM1QixPQUFPLEVBQUMsdURBQXVEO0lBQy9ELE1BQU0sRUFBRSxxREFBcUQ7SUFDN0QsYUFBYSxFQUFFLDhKQUM4RDtJQUM3RSxZQUFZLEVBQUUsOEVBQThFO0lBQzVGLE1BQU0sRUFBRSxpSEFDb0I7SUFDNUIsV0FBVyxFQUFFLGlGQUFpRjtJQUM5RixXQUFXLEVBQUUsOEZBQThGO0lBQzNHLGVBQWUsRUFBRSx3SkFDOEI7SUFDL0MsVUFBVSxFQUFFLCtMQUM2RTtJQUN6RixZQUFZLEVBQUUsa0xBQ3NEO0lBQ3BFLGlCQUFpQixFQUFFLDhLQUMwQztJQUM3RCxrQkFBa0IsRUFBRSxrR0FBa0c7SUFDdEgsbUJBQW1CLEVBQUUsK0tBQ2tEO0lBQ3ZFLFVBQVUsRUFBRSxrTEFDMkQ7Q0FFekUsQ0FBQyIsImZpbGUiOiJzZXJ2aWNlcy9oZWxwLXNlcnZpY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwibG9kYXNoLmQudHNcIiAvPlxuXG5leHBvcnQgY2xhc3MgSGVscFNlcnZpY2Uge1xuICAgZ2V0Tm9kZVR5cGVEZXNjcmlwdGlvbihub2RlVHlwZTogc3RyaW5nKSB7XG4gICAgICByZXR1cm4gTk9ERV9ERVNDUklQVElPTlNbbm9kZVR5cGUudG9VcHBlckNhc2UoKV07XG4gICB9XG59XG5cbmV4cG9ydCB2YXIgTk9ERV9ERVNDUklQVElPTlMgPSB7XG4gICAnTElNSVQnOidyZXR1cm5zIGEgc3BlY2lmaWVkIG51bWJlciBvZiByb3dzIGZyb20gYSByZWNvcmQgc2V0LicsXG4gICAnU09SVCc6ICdzb3J0cyBhIHJlY29yZCBzZXQgYmFzZWQgb24gdGhlIHNwZWNpZmllZCBzb3J0IGtleS4nLFxuICAgJ05FU1RFRCBMT09QJzogYG1lcmdlcyB0d28gcmVjb3JkIHNldHMgYnkgbG9vcGluZyB0aHJvdWdoIGV2ZXJ5IHJlY29yZCBpbiB0aGUgZmlyc3Qgc2V0IGFuZFxuICAgdHJ5aW5nIHRvIGZpbmQgYSBtYXRjaCBpbiB0aGUgc2Vjb25kIHNldC4gQWxsIG1hdGNoaW5nIHJlY29yZHMgYXJlIHJldHVybmVkLmAsXG4gICAnTUVSR0UgSk9JTic6IGBtZXJnZXMgdHdvIHJlY29yZCBzZXRzIGJ5IGZpcnN0IHNvcnRpbmcgdGhlbSBvbiBhIDxzdHJvbmc+am9pbiBrZXk8L3N0cm9uZz4uYCxcbiAgICdIQVNIJzogYGdlbmVyYXRlcyBhIGhhc2ggdGFibGUgZnJvbSB0aGUgcmVjb3JkcyBpbiB0aGUgaW5wdXQgcmVjb3Jkc2V0LiBIYXNoIGlzIHVzZWQgYnlcbiAgIDxzdHJvbmc+SGFzaCBKb2luPC9zdHJvbmc+LmAsXG4gICAnSEFTSCBKT0lOJzogYGpvaW5zIHRvIHJlY29yZCBzZXRzIGJ5IGhhc2hpbmcgb25lIG9mIHRoZW0gKHVzaW5nIGEgPHN0cm9uZz5IYXNoIFNjYW48L3NjYW4+KS5gLFxuICAgJ0FHR1JFR0FURSc6IGBncm91cHMgcmVjb3JkcyB0b2dldGhlciBiYXNlZCBvbiBhIEdST1VQIEJZIG9yIGFnZ3JlZ2F0ZSBmdW5jdGlvbiAobGlrZSA8Y29kZT5zdW0oKTwvY29kZT4pLmAsXG4gICAnSEFTSEFHR1JFR0FURSc6IGBncm91cHMgcmVjb3JkcyB0b2dldGhlciBiYXNlZCBvbiBhIEdST1VQIEJZIG9yIGFnZ3JlZ2F0ZSBmdW5jdGlvbiAobGlrZSBzdW0oKSkuIEhhc2ggQWdncmVnYXRlIHVzZXNcbiAgIGEgaGFzaCB0byBmaXJzdCBvcmdhbml6ZSB0aGUgcmVjb3JkcyBieSBhIGtleS5gLFxuICAgJ1NFUSBTQ0FOJzogYGZpbmRzIHJlbGV2YW50IHJlY29yZHMgYnkgc2VxdWVudGlhbGx5IHNjYW5uaW5nIHRoZSBpbnB1dCByZWNvcmQgc2V0LiBXaGVuIHJlYWRpbmcgZnJvbSBhIHRhYmxlLFxuICAgU2VxIFNjYW5zICh1bmxpa2UgSW5kZXggU2NhbnMpIHBlcmZvcm0gYSBzaW5nbGUgcmVhZCBvcGVyYXRpb24gKG9ubHkgdGhlIHRhYmxlIGlzIHJlYWQpLmAsXG4gICAnSU5ERVggU0NBTic6IGBmaW5kcyByZWxldmFudCByZWNvcmRzIGJhc2VkIG9uIGFuIDxzdHJvbmc+SW5kZXg8L3N0cm9uZz4uIEluZGV4IFNjYW5zIHBlcmZvcm0gMiByZWFkIG9wZXJhdGlvbnM6IG9uZSB0b1xuICAgcmVhZCB0aGUgaW5kZXggYW5kIGFub3RoZXIgdG8gcmVhZCB0aGUgYWN0dWFsIHZhbHVlIGZyb20gdGhlIHRhYmxlLmAsXG4gICAnSU5ERVggT05MWSBTQ0FOJzogYGZpbmRzIHJlbGV2YW50IHJlY29yZHMgYmFzZWQgb24gYW4gPHN0cm9uZz5JbmRleDwvc3Ryb25nPi4gSW5kZXggT25seSBTY2FucyBwZXJmb3JtIGEgc2luZ2xlIHJlYWQgb3BlcmF0aW9uXG4gICBmcm9tIHRoZSBpbmRleCBhbmQgZG8gbm90IHJlYWQgZnJvbSB0aGUgY29ycmVzcG9uZGluZyB0YWJsZS5gLFxuICAgJ0JJVE1BUCBIRUFQIFNDQU4nOiAnc2VhcmNoZXMgdGhyb3VnaCB0aGUgcGFnZXMgcmV0dXJuZWQgYnkgdGhlIDxzdHJvbmc+Qml0bWFwIEluZGV4IFNjYW48L3N0cm9uZz4gZm9yIHJlbGV2YW50IHJvd3MuJyxcbiAgICdCSVRNQVAgSU5ERVggU0NBTic6IGB1c2VzIGEgPHN0cm9uZz5CaXRtYXAgSW5kZXg8L3N0cm9uZz4gKGluZGV4IHdoaWNoIHVzZXMgMSBiaXQgcGVyIHBhZ2UpIHRvIGZpbmQgYWxsIHJlbGV2YW50IHBhZ2VzLlxuICAgUmVzdWx0cyBvZiB0aGlzIG5vZGUgYXJlIGZlZCB0byB0aGUgPHN0cm9uZz5CaXRtYXAgSGVhcCBTY2FuPC9zdHJvbmc+LmAsXG4gICAnQ1RFIFNDQU4nOiBgcGVyZm9ybXMgYSBzZXF1ZW50aWFsIHNjYW4gb2YgPHN0cm9uZz5Db21tb24gVGFibGUgRXhwcmVzc2lvbiAoQ1RFKSBxdWVyeTwvc3Ryb25nPiByZXN1bHRzLiBOb3RlIHRoYXRcbiAgIHJlc3VsdHMgb2YgYSBDVEUgYXJlIG1hdGVyaWFsaXplZCAoY2FsY3VsYXRlZCBhbmQgdGVtcG9yYXJpbHkgc3RvcmVkKS5gXG5cbn07XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=