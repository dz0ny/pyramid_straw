var SyntaxHighlightService = (function () {
    function SyntaxHighlightService() {
        this.OPEN_TAG = ' _OPEN_TAG_';
        this.CLOSE_TAG = '_CLOSE_TAG_';
    }
    SyntaxHighlightService.prototype.highlight = function (code, keyItems) {
        var _this = this;
        hljs.registerLanguage('sql', exports.LANG_SQL);
        hljs.configure({
            tabReplace: '    '
        });
        var result = code.toUpperCase().replace(', ', ',');
        _.each(keyItems, function (keyItem) {
            result = result.replace(keyItem.toUpperCase(), "" + _this.OPEN_TAG + keyItem + _this.CLOSE_TAG);
        });
        result = hljs.highlightAuto(result).value;
        result = result.replace(new RegExp(this.OPEN_TAG, 'g'), "<span class='code-key-item'>");
        result = result.replace(new RegExp(this.CLOSE_TAG, 'g'), '</span>');
        return result;
    };
    return SyntaxHighlightService;
})();
exports.SyntaxHighlightService = SyntaxHighlightService;
exports.LANG_SQL = function (hljs) {
    var COMMENT_MODE = hljs.COMMENT('--', '$');
    return {
        case_insensitive: true,
        illegal: /[<>{}*]/,
        contains: [
            {
                beginKeywords: 'begin end start commit rollback savepoint lock alter create drop rename call ' +
                    'delete do handler insert load replace select truncate update set show pragma grant ' +
                    'merge describe use explain help declare prepare execute deallocate release ' +
                    'unlock purge reset change stop analyze cache flush optimize repair kill ' +
                    'install uninstall checksum restore check backup revoke',
                end: /;/, endsWithParent: true,
                keywords: {
                    keyword: 'abort abs absolute acc acce accep accept access accessed accessible account acos action activate add ' +
                        'addtime admin administer advanced advise aes_decrypt aes_encrypt after agent aggregate ali alia alias ' +
                        'allocate allow alter always analyze ancillary and any anydata anydataset anyschema anytype apply ' +
                        'archive archived archivelog are as asc ascii asin assembly assertion associate asynchronous at atan ' +
                        'atn2 attr attri attrib attribu attribut attribute attributes audit authenticated authentication authid ' +
                        'authors auto autoallocate autodblink autoextend automatic availability avg backup badfile basicfile ' +
                        'before begin beginning benchmark between bfile bfile_base big bigfile bin binary_double binary_float ' +
                        'binlog bit_and bit_count bit_length bit_or bit_xor bitmap blob_base block blocksize body both bound ' +
                        'buffer_cache buffer_pool build bulk by byte byteordermark bytes cache caching call calling cancel ' +
                        'capacity cascade cascaded case cast catalog category ceil ceiling chain change changed char_base ' +
                        'char_length character_length characters characterset charindex charset charsetform charsetid check ' +
                        'checksum checksum_agg child choose chr chunk class cleanup clear client clob clob_base clone close ' +
                        'cluster_id cluster_probability cluster_set clustering coalesce coercibility col collate collation ' +
                        'collect colu colum column column_value columns columns_updated comment commit compact compatibility ' +
                        'compiled complete composite_limit compound compress compute concat concat_ws concurrent confirm conn ' +
                        'connec connect connect_by_iscycle connect_by_isleaf connect_by_root connect_time connection ' +
                        'consider consistent constant constraint constraints constructor container content contents context ' +
                        'contributors controlfile conv convert convert_tz corr corr_k corr_s corresponding corruption cos cost ' +
                        'count count_big counted covar_pop covar_samp cpu_per_call cpu_per_session crc32 create creation ' +
                        'critical cross cube cume_dist curdate current current_date current_time current_timestamp current_user ' +
                        'cursor curtime customdatum cycle d data database databases datafile datafiles datalength date_add ' +
                        'date_cache date_format date_sub dateadd datediff datefromparts datename datepart datetime2fromparts ' +
                        'day day_to_second dayname dayofmonth dayofweek dayofyear days db_role_change dbtimezone ddl deallocate ' +
                        'declare decode decompose decrement decrypt deduplicate def defa defau defaul default defaults ' +
                        'deferred defi defin define degrees delayed delegate delete delete_all delimited demand dense_rank ' +
                        'depth dequeue des_decrypt des_encrypt des_key_file desc descr descri describ describe descriptor ' +
                        'deterministic diagnostics difference dimension direct_load directory disable disable_all ' +
                        'disallow disassociate discardfile disconnect diskgroup distinct distinctrow distribute distributed div ' +
                        'do document domain dotnet double downgrade drop dumpfile duplicate duration e each edition editionable ' +
                        'editions element ellipsis else elsif elt empty enable enable_all enclosed encode encoding encrypt ' +
                        'end end-exec endian enforced engine engines enqueue enterprise entityescaping eomonth error errors ' +
                        'escaped evalname evaluate event eventdata events except exception exceptions exchange exclude excluding ' +
                        'execu execut execute exempt exists exit exp expire explain export export_set extended extent external ' +
                        'external_1 external_2 externally extract f failed failed_login_attempts failover failure far fast ' +
                        'feature_set feature_value fetch field fields file file_name_convert filesystem_like_logging final ' +
                        'finish first first_value fixed flash_cache flashback floor flush following follows for forall force ' +
                        'form forma format found found_rows freelist freelists freepools fresh from from_base64 from_days ' +
                        'ftp full function g general generated get get_format get_lock getdate getutcdate global global_name ' +
                        'globally go goto grant grants greatest group group_concat group_id grouping grouping_id groups ' +
                        'gtid_subtract guarantee guard handler hash hashkeys having hea head headi headin heading heap help hex ' +
                        'hierarchy high high_priority hosts hour http i id ident_current ident_incr ident_seed identified ' +
                        'identity idle_time if ifnull ignore iif ilike ilm immediate import in include including increment ' +
                        'index indexes indexing indextype indicator indices inet6_aton inet6_ntoa inet_aton inet_ntoa infile ' +
                        'initial initialized initially initrans inmemory inner innodb input insert install instance instantiable ' +
                        'instr interface interleaved intersect into invalidate invisible is is_free_lock is_ipv4 is_ipv4_compat ' +
                        'is_not is_not_null is_used_lock isdate isnull isolation iterate java join json json_exists ' +
                        'k keep keep_duplicates key keys kill l language large last last_day last_insert_id last_value lax lcase ' +
                        'lead leading least leaves left len lenght length less level levels library like like2 like4 likec limit ' +
                        'lines link list listagg little ln load load_file lob lobs local localtime localtimestamp locate ' +
                        'locator lock locked log log10 log2 logfile logfiles logging logical logical_reads_per_call ' +
                        'logoff logon logs long loop low low_priority lower lpad lrtrim ltrim m main make_set makedate maketime ' +
                        'managed management manual map mapping mask master master_pos_wait match matched materialized max ' +
                        'maxextents maximize maxinstances maxlen maxlogfiles maxloghistory maxlogmembers maxsize maxtrans ' +
                        'md5 measures median medium member memcompress memory merge microsecond mid migration min minextents ' +
                        'minimum mining minus minute minvalue missing mod mode model modification modify module monitoring month ' +
                        'months mount move movement multiset mutex n name name_const names nan national native natural nav nchar ' +
                        'nclob nested never new newline next nextval no no_write_to_binlog noarchivelog noaudit nobadfile ' +
                        'nocheck nocompress nocopy nocycle nodelay nodiscardfile noentityescaping noguarantee nokeep nologfile ' +
                        'nomapping nomaxvalue nominimize nominvalue nomonitoring none noneditionable nonschema noorder ' +
                        'nopr nopro noprom nopromp noprompt norely noresetlogs noreverse normal norowdependencies noschemacheck ' +
                        'noswitch not nothing notice notrim novalidate now nowait nth_value nullif nulls num numb numbe ' +
                        'nvarchar nvarchar2 object ocicoll ocidate ocidatetime ociduration ociinterval ociloblocator ocinumber ' +
                        'ociref ocirefcursor ocirowid ocistring ocitype oct octet_length of off offline offset oid oidindex old ' +
                        'on online only opaque open operations operator optimal optimize option optionally or oracle oracle_date ' +
                        'oradata ord ordaudio orddicom orddoc order ordimage ordinality ordvideo organization orlany orlvary ' +
                        'out outer outfile outline output over overflow overriding p package pad parallel parallel_enable ' +
                        'parameters parent parse partial partition partitions pascal passing password password_grace_time ' +
                        'password_lock_time password_reuse_max password_reuse_time password_verify_function patch path patindex ' +
                        'pctincrease pctthreshold pctused pctversion percent percent_rank percentile_cont percentile_disc ' +
                        'performance period period_add period_diff permanent physical pi pipe pipelined pivot pluggable plugin ' +
                        'policy position post_transaction pow power pragma prebuilt precedes preceding precision prediction ' +
                        'prediction_cost prediction_details prediction_probability prediction_set prepare present preserve ' +
                        'prior priority private private_sga privileges procedural procedure procedure_analyze processlist ' +
                        'profiles project prompt protection public publishingservername purge quarter query quick quiesce quota ' +
                        'quotename radians raise rand range rank raw read reads readsize rebuild record records ' +
                        'recover recovery recursive recycle redo reduced ref reference referenced references referencing refresh ' +
                        'regexp_like register regr_avgx regr_avgy regr_count regr_intercept regr_r2 regr_slope regr_sxx regr_sxy ' +
                        'reject rekey relational relative relaylog release release_lock relies_on relocate rely rem remainder rename ' +
                        'repair repeat replace replicate replication required reset resetlogs resize resource respect restore ' +
                        'restricted result result_cache resumable resume retention return returning returns reuse reverse revoke ' +
                        'right rlike role roles rollback rolling rollup round row row_count rowdependencies rowid rownum rows ' +
                        'rtrim rules safe salt sample save savepoint sb1 sb2 sb4 scan schema schemacheck scn scope scroll ' +
                        'sdo_georaster sdo_topo_geometry search sec_to_time second section securefile security seed segment select ' +
                        'self sequence sequential serializable server servererror session session_user sessions_per_user set ' +
                        'sets settings sha sha1 sha2 share shared shared_pool short show shrink shutdown si_averagecolor ' +
                        'si_colorhistogram si_featurelist si_positionalcolor si_stillimage si_texture siblings sid sign sin ' +
                        'size size_t sizes skip slave sleep smalldatetimefromparts smallfile snapshot some soname sort soundex ' +
                        'source space sparse spfile split sql sql_big_result sql_buffer_result sql_cache sql_calc_found_rows ' +
                        'sql_small_result sql_variant_property sqlcode sqldata sqlerror sqlname sqlstate sqrt square standalone ' +
                        'standby start starting startup statement static statistics stats_binomial_test stats_crosstab ' +
                        'stats_ks_test stats_mode stats_mw_test stats_one_way_anova stats_t_test_ stats_t_test_indep ' +
                        'stats_t_test_one stats_t_test_paired stats_wsr_test status std stddev stddev_pop stddev_samp stdev ' +
                        'stop storage store stored str str_to_date straight_join strcmp strict string struct stuff style subdate ' +
                        'subpartition subpartitions substitutable substr substring subtime subtring_index subtype success sum ' +
                        'suspend switch switchoffset switchover sync synchronous synonym sys sys_xmlagg sysasm sysaux sysdate ' +
                        'sysdatetimeoffset sysdba sysoper system system_user sysutcdatetime t table tables tablespace tan tdo ' +
                        'template temporary terminated tertiary_weights test than then thread through tier ties time time_format ' +
                        'time_zone timediff timefromparts timeout timestamp timestampadd timestampdiff timezone_abbr ' +
                        'timezone_minute timezone_region to to_base64 to_date to_days to_seconds todatetimeoffset trace tracking ' +
                        'transaction transactional translate translation treat trigger trigger_nestlevel triggers trim truncate ' +
                        'try_cast try_convert try_parse type ub1 ub2 ub4 ucase unarchived unbounded uncompress ' +
                        'under undo unhex unicode uniform uninstall union unique unix_timestamp unknown unlimited unlock unpivot ' +
                        'unrecoverable unsafe unsigned until untrusted unusable unused update updated upgrade upped upper upsert ' +
                        'url urowid usable usage use use_stored_outlines user user_data user_resources users using utc_date ' +
                        'utc_timestamp uuid uuid_short validate validate_password_strength validation valist value values var ' +
                        'var_samp varcharc vari varia variab variabl variable variables variance varp varraw varrawc varray ' +
                        'verify version versions view virtual visible void wait wallet warning warnings week weekday weekofyear ' +
                        'wellformed when whene whenev wheneve whenever where while whitespace with within without work wrapped ' +
                        'xdb xml xmlagg xmlattributes xmlcast xmlcolattval xmlelement xmlexists xmlforest xmlindex xmlnamespaces ' +
                        'xmlpi xmlquery xmlroot xmlschema xmlserialize xmltable xmltype xor year year_to_month years yearweek',
                    literal: 'true false null',
                    built_in: 'array bigint binary bit blob boolean char character date dec decimal float int int8 integer interval number ' +
                        'numeric real record serial serial8 smallint text varchar varying void'
                },
                contains: [
                    {
                        className: 'string',
                        begin: '\'', end: '\'',
                        contains: [hljs.BACKSLASH_ESCAPE, { begin: '\'\'' }]
                    },
                    {
                        className: 'string',
                        begin: '"', end: '"',
                        contains: [hljs.BACKSLASH_ESCAPE, { begin: '""' }]
                    },
                    {
                        className: 'string',
                        begin: '`', end: '`',
                        contains: [hljs.BACKSLASH_ESCAPE]
                    },
                    hljs.C_NUMBER_MODE,
                    hljs.C_BLOCK_COMMENT_MODE,
                    COMMENT_MODE
                ]
            },
            hljs.C_BLOCK_COMMENT_MODE,
            COMMENT_MODE
        ]
    };
};

//# sourceMappingURL=data:application/json;base64,